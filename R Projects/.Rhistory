col <- adm[adm$NAME_0 == "Mexico"]
plot(col, bg = "bisque", axes=T)
col <- adm[adm$NAME_0 == "Mexico"]
col <- adm[adm$ISO == "MEX"]
plot(col, bg = "bisque", axes=T)
adm <- raster::getData("GADM", country = "Mexico",
level = 1, path = datdir)   ## level 2 indicates that we want the counties
plot(adm[adm$NAME_0 == "Mexico",])
col <- adm[adm$ISO == "MEX",]
plot(col, bg = "bisque", axes=T)
plot(col, lwd = 5, border = "darkorange", add=T)
plot(col, col = "peru", add = T)
grid()
box()
invisible(text(getSpPPolygonsLabptSlots(col),
labels = as.character(col$TYPE_1[col$TYPE_1 == "Distrito Federal"]), cex = 1.1,
col = "royalblue4", font = 1))
invisible(text(getSpPPolygonsLabptSlots(col),
labels = as.character(col$TYPE_1 == "Distrito Federal"), cex = 1.1,
col = "royalblue4", font = 1))
plot(col, bg = "bisque", axes=T)
plot(col, lwd = 5, border = "darkorange", add=T)
plot(col, col = "peru", add = T)
grid()
box()
invisible(text(getSpPPolygonsLabptSlots(col$TYPE_1 == "Distrito Federal"),
labels = as.character(col$TYPE_1 == "Distrito Federal"), cex = 1.1,
col = "royalblue4", font = 1))
invisible(text(getSpPPolygonsLabptSlots(col[col$TYPE_1 == "Distrito Federal"]),
labels = as.character(col$TYPE_1 == "Distrito Federal"), cex = 1.1,
col = "royalblue4", font = 1))
mtext(side = 3, line = 1, "Map of WY", cex = 2)
invisible(text(getSpPPolygonsLabptSlots([col$TYPE_1 == "Distrito Federal"]),
labels = as.character(col$TYPE_1 == "Distrito Federal"), cex = 1.1,
col = "royalblue4", font = 1))
invisible(text(getSpPPolygonsLabptSlots(col$TYPE_1 == "Distrito Federal"),
labels = as.character(col$TYPE_1 == "Distrito Federal"), cex = 1.1,
col = "royalblue4", font = 1))
library(sqldf)
install.packages(sqldf)
install.packages('sqldf')
library(sqldf)
invisible(text(getSpPPolygonsLabptSlots(col$TYPE_1[col$TYPE_1 == "Distrito Federal"]),
labels = as.character(col$TYPE_1 == "Distrito Federal"), cex = 1.1,
col = "royalblue4", font = 1))
plot(col, bg = "bisque", axes=T)
plot(col, lwd = 5, border = "darkorange", add=T)
plot(col, col = "peru", add = T)
grid()
box()
invisible(text(getSpPPolygonsLabptSlots(col[col$TYPE_1 == "Distrito Federal"]),
labels = as.character(col$TYPE_1 == "Distrito Federal"), cex = 1.1,
col = "royalblue4", font = 1))
invisible(text(getSpPPolygonsLabptSlots(col),
labels = as.character(col$TYPE_1 == "Distrito Federal"), cex = 1.1,
col = "royalblue4", font = 1))
invisible(text(getSpPPolygonsLabptSlots(col),
labels = as.character(col[col$TYPE_1 == "Distrito Federal"]), cex = 1.1,
col = "royalblue4", font = 1))
df <- col[col$TYPE_1 == "Distrito Federal"]
invisible(text(getSpPPolygonsLabptSlots(col),
labels = as.character(df), cex = 1.1,
df = "royalblue4", font = 1))
mtext(side = 3, line = 1, "Map of Mexico", cex = 2)
df <- col[col$TYPE_1 == "Distrito Federal"]
invisible(text(getSpPPolygonsLabptSlots(df),
labels = as.character(df), cex = 1.1,
df = "royalblue4", font = 1))
mtext(side = 3, line = 1, "Map of Mexico", cex = 2)
library(sp)
mtext(side = 3, line = 1, "Map of Mexico", cex = 2)
invisible(text(getSpPPolygonsLabptSlots(df),
labels = as.character(df), cex = 1.1,
df = "royalblue4", font = 1))
invisible(text(getSpPPolygonsLabptSlots(df),
labels = as.character(df$TYPE_1), cex = 1.1,
col = "royalblue4", font = 1))
invisible(text(getSpPPolygonsLabptSlots(col),
labels = as.character(df$TYPE_1), cex = 1.1,
col = "royalblue4", font = 1))
invisible(text(getSpPPolygonsLabptSlots(col),
labels = as.character(col$TYPE_1), cex = 1.1,
col = "royalblue4", font = 1))
mtext(side = 3, line = 1, "Map of Mexico", cex = 2)
invisible(text(getSpPPolygonsLabptSlots(col),
labels = as.character(col$TYPE_1), cex = 1.1,
col = "royalblue4", font = 1))
datdir <- 'data'
dir.create(datdir, showWarnings = F)
adm <- raster::getData("GADM", country = "Mexico",
level = 1, path = datdir)   ## level 2 indicates that we want the counties
plot(adm[adm$NAME_0 == "Mexico",])
plot(adm[adm$NAME_0 == "Mexico",])
col <- adm[adm$TYPE_1 == "Distrito Federal",]
plot(col, bg = "bisque", axes=T)
col <- adm[adm$ISO == "MEX",]
df <- adm[adm$TYPE_1 == "Distrito Federal",]
plot(col, bg = "bisque", axes=T)
plot(col, lwd = 5, border = "darkorange", add=T)
plot(col, col = "peru", add = T)
grid()
box()
plot(df, bg = 'blue', axes = F)
col <- adm[adm$ISO == "MEX",]
df <- adm[adm$TYPE_1 == "Distrito Federal",]
par(mfrow = c(2, 1))
plot(col, bg = "bisque", axes=T)
par(mfrow = c(2, 1))
plot(col, bg = "bisque", axes=T)
par(mfrow = c(1, 2))
plot(col, bg = "bisque", axes=T)
plot(col, lwd = 5, border = "darkorange", add=T)
plot(col, col = "peru", add = T)
grid()
box()
plot(df, bg = 'blue', axes = T)
par(mfrow = c(1, 2))
plot(col, bg = "bisque", axes=T)
plot(df, bg = 'bisque', axes = T)
plot(col, df, lwd = 5, border = "darkorange", add=T)
plot(col, lwd = 5, border = "darkorange", add=T)
plot(df, lwd = 5, border = "darkorange", add=T)
plot(col, lwd = 5, border = "darkorange", add=T)
datdir <- 'data'
dir.create(datdir, showWarnings = F)
adm <- raster::getData("GADM", country = "Mexico",
level = 1, path = datdir)   ## level 2 indicates that we want the counties
## to show, not just state
## level 0 = entire country, lvl 1 = states
plot(adm[adm$NAME_0 == "Mexico",])
# col <- adm[adm$NAME_1 == "Colorado",
#            adm$NAME_1 == "California",
#            adm$NAME_1 == "Utah",
#            adm$NAME_1 == "Massachusets",
#            adm$NAME_1 == "Texas",
#            adm$NAME_1 == "Nevada"]
main <- adm[adm$ISO == "MEX",]
cap <- adm[adm$TYPE_1 == "Distrito Federal",]
par(mfrow = c(1, 2))
plot(main, bg = "bisque", axes=T)
plot(cap, bg = 'bisque', axes = T)
plot(main, lwd = 5, border = "darkorange", add=T)
plot(cap, lwd = 5, border = "darkorange", add=T)
plot(main, col = "peru", add = T)
plot(cap, col = "peru", add = T)
grid()
box()
invisible(text(getSpPPolygonsLabptSlots(df),
labels = as.character(df$TYPE_1), cex = 1.1,
col = "royalblue4", font = 1))
mtext(side = 3, line = 1, "Map of Mexico and Federal District", cex = 2)
mtext(side = 1, "Longitude", line = 2.5, cex=1.1)
mtext(side = 2, "Latitude", line = 2.5, cex=1.1)
text(122.08, 13.22, "Projection: Geographic\n
Coordinate System: WGS 1984\n
Data Source: GADM.org", adj = c(0, 0), cex = 0.7, col = "grey20")
invisible(text(getSpPPolygonsLabptSlots(df),
labels = as.character(df$TYPE_1), cex = 1.1,
col = "royalblue4", font = 1))
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
mtext(side = 3, line = 1, "Map of Mexico and\n Federal District", cex = 2)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
?grid()
datdir <- 'data'
dir.create(datdir, showWarnings = F)
adm <- raster::getData("GADM", country = "Mexico",
level = 1, path = datdir)   ## level 2 indicates that we want the counties
plot(adm[adm$NAME_0 == "Mexico",])
datdir <- 'data'
dir.create(datdir, showWarnings = F)
adm <- raster::getData("GADM", country = "Mexico",
level = 1, path = datdir)   ## level 2 indicates that we want the counties
par(mfrow = c(1, 2))
mainc <- adm[adm$ISO == "MEX",]
cap <- adm[adm$TYPE_1 == "Distrito Federal",]
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex= 0.5)
plot(mainc, lwd = 5, border = "darkorange", add=T)
plot(mainc, col = "peru", add = T)
mainc <- adm[adm$ISO == "MEX",]
cap <- adm[adm$TYPE_1 == "Distrito Federal",]
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex= 0.5)
par(mfrow = c(1, 2))
mainc <- adm[adm$ISO == "MEX",]
cap <- adm[adm$TYPE_1 == "Distrito Federal",]
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex= 0.5)
plot(mainc, bg = "bisque", axes=F, main = "Entire Country", cex= 0.5)
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex= 0.1)
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex.axes= 0.1)
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex.axis= 0.1)
warnings()
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex.axis= 0.5)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
countAndCap("Mexico")
countAndCap(Mexico)
countAndCap("Mexico")
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
checkCap <- adm$TYPE_1
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
datdir <- 'data'
dir.create(datdir, showWarnings = F)
adm <- raster::getData("GADM", country = "Mexico",
level = 1, path = datdir)   ## level 2 indicates that we want the counties
checkCap <- adm$TYPE_1
checkCapOut <- names(table(checkCap))[table(checkCap)<2]
resultCap <- checkCapOut
par(mfrow = c(1, 2))
mainc <- adm[adm$NAME_0 == "Mexico",]
cap <- adm[adm$TYPE_1 == resultCap]
par(mfrow = c(1, 2))
mainc <- adm[adm$NAME_0 == "Mexico",]
cap <- adm[adm$TYPE_1 == cat("",resultCap,""]
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex.axis= 0.5, cex.main = 0.7, cex.axis= 0.5)
plot(mainc, lwd = 5, border = "darkorange", add=T)
plot(mainc, col = "peru", add = T)
grid()
box()
mtext(side = 1, "Longitude", line = 2.5, cex=0.5)
mtext(side = 2, "Latitude", line = 2.5, cex=0.5)
plot(cap, bg = 'bisque', axes = T, main = "Location of Capital", cex.axis= 0.5, cex.main = 0.7)
plot(cap, lwd = 5, border = "darkorange", add=T)
plot(cap, col = "peru", add = T)
grid()
box()
invisible(text(getSpPPolygonsLabptSlots(df),
labels = as.character(df$TYPE_1), cex = 1,
col = "royalblue4", font = 1))
title(cat("Map of Mexico and\n Area where Capital is Located", outer = T, cex = 2))
mtext(side = 1, "Longitude", line = 2.5, cex=0.5)
mtext(side = 2, "Latitude", line = 2.5, cex=0.5)
text("Projection: Geographic\n
Coordinate System: WGS 1984\n
Data Source: GADM.org", adj = c(0, 0), cex = 0.2, col = "grey20")
cap <- adm[adm$TYPE_1 == cat("",resultCap,"")]
plot(mainc, bg = "bisque", axes=T, main = "Entire Country", cex.axis= 0.5, cex.main = 0.7, cex.axis= 0.5)
plot(mainc, lwd = 5, border = "darkorange", add=T)
plot(mainc, col = "peru", add = T)
grid()
box()
mtext(side = 1, "Longitude", line = 2.5, cex=0.5)
mtext(side = 2, "Latitude", line = 2.5, cex=0.5)
plot(cap, bg = 'bisque', axes = T, main = "Location of Capital", cex.axis= 0.5, cex.main = 0.7)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
countAndCap('Venezuela', 1)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 1/exercise1_simple.R', echo=TRUE)
countAndCap('Italy', 1)
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 2/lesson 2.R', echo=TRUE)
install.packages("spatstat")
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 2/lesson 2.R', echo=TRUE)
library(raster)
library(spatstat)
install.packages("C:/Users/MARTA/Desktop/spatstat_1.50-0.zip", repos = NULL, type = "win.binary")
library(spatstat)
library("spatstat", lib.loc="~/R/win-library/3.2")
install.packages(c("curl", "jsonlite", "MODIS", "stringi", "zoo"))
install.packages(c("cluster", "codetools", "foreign", "lattice", "Matrix", "mgcv", "nlme", "survival"), lib="C:/Program Files/R/R-3.2.4revised/library")
library("spatstat", lib.loc="~/R/win-library/3.2")
install.packages("spatstat")
source('C:/Users/MARTA/Desktop/Geoscripting/GitHub/R Projects/Lesson 2/lesson 2.R', echo=TRUE)
getwd()
## Download data (if it doesn't work, try with method='wget')
download.file(url = 'https://raw.githubusercontent.com/GeoScripting-WUR/Scripting4Geo/gh-pages/data/MODIS_VCF_2000-2010_NL.rds', destfile = 'MODIS.rds', method = 'wget')
## Read the data
modis <- readRDS('MODIS.rds')
## Clean data (values > 100 correspond to water)
modis[modis > 100] <- NA
## Visualize
plot(modis, 1)
modis <- readRDS('MODIS.rds')
modis[modis > 100] <- NA
plot(modis, 1)
plot(modis, 1)
plot(modis, 1)
plot(modis, 1)
plot(modis)
plot(modis, 1)
modis <- readRDS('data/MODIS.rds')
modis[modis > 100] <- NA
plot(modis, 1)
e <- extent(340101, 370323, 5756221, 5787772)
plot(e, add=TRUE)
modis_sub <- crop(modis, e)
plot(modis_sub, 1)
# Define function to calculate temporal trends
fun <- function(x) {
ts <- zoo(x, time)
df <- data.frame(t = decimal_date(index(ts)), vcf = c(ts))
out <- try(lm(vcf ~ t, data = df)$coefficients[2], silent = T)
if(class(out) == 'try-error')
out <- NA
return(out)
}
# Run the function spatially (this may take a few minutes, time for a break?)
time <- getZ(modis)
out <- calc(x = modis_sub, fun = fun)
# Visualize output
plot(out)
hist(out, main = 'Tree cover change at 250 m resolution (2000-2010)', xlab = 'Percentage change')
plot(out)
fun <- function(x) {
ts <- zoo(x, time)
df <- data.frame(t = decimal_date(index(ts)), vcf = c(ts))
out <- try(lm(vcf ~ t, data = df)$coefficients[2], silent = T)
if(class(out) == 'try-error')
out <- NA
return(out)
}
time <- getZ(modis)
out <- calc(x = modis_sub, fun = fun)
time <- getZ(modis)
out <- calc(x = modis_sub, fun = fun)
out <- calc(x = modis, fun = fun)
plot(out)
out <- calc(x = modis_sub, fun = fun)
require(raster)
e <- extent(340101, 370323, 5756221, 5787772)
plot(e, add=TRUE)
modis_sub <- crop(modis, e)
plot(modis_sub, 1)
# Define function to calculate temporal trends
fun <- function(x) {
ts <- zoo(x, time)
df <- data.frame(t = decimal_date(index(ts)), vcf = c(ts))
out <- try(lm(vcf ~ t, data = df)$coefficients[2], silent = T)
if(class(out) == 'try-error')
out <- NA
return(out)
}
# Run the function spatially (this may take a few minutes, time for a break?)
time <- getZ(modis)
out <- calc(x = modis_sub, fun = fun)
# Visualize output
plot(out)
hist(out, main = 'Tree cover change at 250 m resolution (2000-2010)', xlab = 'Percentage change')
library(zoo)
library(lubridate)
library(raster)
plot(modis, 1)
e <- extent(340101, 370323, 5756221, 5787772)
plot(e, add=TRUE)
modis_sub <- crop(modis, e)
plot(modis_sub, 1)
fun <- function(x) {
ts <- zoo(x, time)
df <- data.frame(t = decimal_date(index(ts)), vcf = c(ts))
out <- try(lm(vcf ~ t, data = df)$coefficients[2], silent = T)
if(class(out) == 'try-error')
out <- NA
return(out)
}
time <- getZ(modis)
out <- calc(x = modis_sub, fun = fun)
plot(out)
hist(out, main = 'Tree cover change at 250 m resolution (2000-2010)', xlab = 'Percentage change')
hist(out, main = 'Tree cover change at\n 250 m resolution (2000-2010)', xlab = 'Percentage change')
plot(out)
hist(out, main = 'Tree cover change at\n 250 m resolution (2000-2010)', xlab = 'Percentage change')
library(leaflet)
install.packages('leaflet')
install.packages(c("googleVis", "XML", "httr"))
library(googleVis)
library(XML)
library(httr)
# set googleVis options to change the behaviour of plot.gvis,
# so that only the chart component of the HTML file is written into the # output file.
op <- options(gvis.plot.tag='chart')
# Read table from html
url <- "http://en.wikipedia.org/wiki/List_of_national_parks"
#x <- readHTMLTable(readLines(url), which=3, stringsAsFactors = FALSE)
page <- GET(url, user_agent("httr"))
x <- readHTMLTable(text_content(page), which=3, stringsAsFactors = FALSE)
# Clean up df
colnames (x) <- c('country', 'oldest', 'number', 'area_tot', 'country_percentage')
x$oldest <- as.numeric(x$oldest)
x$number <- as.numeric(gsub("\\*", "", x$number))
x$area_tot <- as.numeric(gsub("(,)|(\\[.*\\])", "", x$area_tot))
x$country_percentage <- as.numeric(gsub("(%)|(\\[.*\\])", "", x$country_percentage))
nationalParks <- x
g <- gvisGeoChart(nationalParks, locationvar="country", colorvar = "oldest", sizevar = "number",
options=list(region="150", displayMode="markers", colorAxis="{colors: ['green', 'blue']}"))
plot(g)
op <- options(gvis.plot.tag='chart')
url <- "http://en.wikipedia.org/wiki/List_of_national_parks"
page <- GET(url, user_agent("httr"))
x <- readHTMLTable(text_content(page), which=3, stringsAsFactors = FALSE)
colnames (x) <- c('country', 'oldest', 'number', 'area_tot', 'country_percentage')
x$oldest <- as.numeric(x$oldest)
x$number <- as.numeric(gsub("\\*", "", x$number))
x$area_tot <- as.numeric(gsub("(,)|(\\[.*\\])", "", x$area_tot))
x$country_percentage <- as.numeric(gsub("(%)|(\\[.*\\])", "", x$country_percentage))
nationalParks <- x
g <- gvisGeoChart(nationalParks, locationvar="country", colorvar = "oldest", sizevar = "number",
options=list(region="150", displayMode="markers", colorAxis="{colors: ['green', 'blue']}"))
plot(g)
library(raster)
library(spatstat)
library(rgeos)
bel <- raster::getData('alt', country='BEL', mask=TRUE) ## SRTM 90m height data
belshp <- raster::getData('GADM', country='BEL', level=2) ## administrative boundaries
dran <- runifpoint(500, win = as.vector(extent(bel)))
S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
proj4string = CRS(proj4string(belshp)))
Sint <- gIntersection(S, belshp)
plot(bel)
bel
belshp
dran
S
plot(bel)
plot(bel)
plot(belshp)
plot(S)
bel <- raster::getData('alt', country='BEL', mask=F) ## SRTM 90m height data
plot(bel)
plot(belshp)
dran <- runifpoint(500, win = as.vector(extent(bel)))
S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
proj4string = CRS(proj4string(belshp)))
Sint <- gIntersection(S, belshp)
plot(bel)
plot(belshp, add=TRUE)
plot(Sint, add = TRUE, col = "red", pch = 19, cex = 0.2)
download.file(url = 'https://raw.githubusercontent.com
/loicdtx/bfastSpatial/master/data/tura.rda',
destfile = 'tura.rda', method = 'auto')
download.file(url = 'https://raw.githubusercontent.com
/loicdtx/bfastSpatial/master/data/tura.rda',
destfile = 'tura.rda', method = 'auto')
download.file(url = 'https://raw.githubusercontent.com/loicdtx/bfastSpatial/master/data/tura.rda',
destfile = 'tura.rda', method = 'auto')
